C 언어에서 문자열을 다루는 데 사용되는 `strcpy()`, `strncpy()`, `strdup()` 함수는 문자열을 복사하거나 새로운 문자열을 생성하는 데 사용됩니다. 이들 함수는 `<string.h>` 또는 `<cstring>` 헤더 파일에 정의되어 있습니다.

### `strcpy()`

`strcpy()` 함수는 하나의 문자열을 다른 문자열로 복사하는 함수입니다. 이 함수는 널 종료 문자(`'\0'`)를 만날 때까지 소스 문자열의 모든 문자를 대상 문자열에 복사합니다. 함수 원형은 다음과 같습니다:

```c
char *strcpy(char *dest, const char *src);
```

- `dest`: 복사된 문자열을 저장할 대상 문자열의 포인터입니다. 충분한 크기의 메모리 공간을 가리켜야 합니다.
- `src`: 복사할 원본 문자열의 포인터입니다.
- 반환 값: `dest` 문자열의 포인터를 반환합니다.

`strcpy()` 함수를 사용할 때는 주의가 필요한데, 대상 문자열(`dest`)에 충분한 공간이 확보되어 있지 않으면 버퍼 오버플로우를 일으켜 프로그램의 취약점이 될 수 있습니다.

### `strncpy()`

`strncpy()` 함수는 `strcpy()`의 안전한 버전으로, 지정된 길이만큼만 문자열을 복사합니다. 이 함수는 복사할 문자의 최대 개수를 지정하여 버퍼 오버플로우의 위험을 줄일 수 있습니다. 함수 원형은 다음과 같습니다:

```c
char *strncpy(char *dest, const char *src, size_t n);
```

- `dest`: 복사된 문자열을 저장할 대상 문자열의 포인터입니다.
- `src`: 복사할 원본 문자열의 포인터입니다.
- `n`: `src`에서 `dest`로 복사할 최대 문자 수입니다.
- 반환 값: `dest` 문자열의 포인터를 반환합니다.

`strncpy()`는 지정된 길이 `n`에 도달하거나 소스 문자열의 끝에 도달할 때까지 복사를 수행합니다. 만약 `n`이 소스 문자열의 길이보다 크면, 나머지 공간은 널(`'\0'`)로 채워집니다. 그러나 소스 문자열의 길이가 `n`보다 클 경우, 대상 문자열은 널 종료 문자로 끝나지 않을 수 있으므로 주의가 필요합니다.

### `strdup()`

`strdup()` 함수는 주어진 문자열의 복사본을 새로 할당된 메모리에 생성합니다. 이 함수는 문자열을 복사하고, 새 문자열을 위한 메모리를 동적으로 할당합니다. 함수 원형은 다음과 같습니다:

```c
char *strdup(const char *s);
```

- `s`: 복사할 원본 문자열의 포인터입니다.
- 반환 값: 새로 할당된 메모리에 복사된 문자열의 포인터를 반환합니다. 메모리 할당에 실패하면 `NULL`을 반환합니다.

`strdup()` 함수를 사용한 후에는 동적으로 할당된 메모리를 해제하기 위해 `free()` 함수를 반드시 호출해야 합니다. 이 함수는 C 표준에는 포함되어 있지 않지만, 많은 시스템에서 POSIX 확장의 일부로 제공됩니다.