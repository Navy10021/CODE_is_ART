
메모리 처리 함수들

1.`memcpy()`
-  기능 : 한 메모리 영역에서 다른 메모리 영역으로 데이터를 복사합니다. 영역이 겹치면 정의되지 않은 동작이 발생할 수 있습니다.
-  사용법 : `void *memcpy(void *dest, const void *src, size_t n);`
-  예시 : `memcpy(dest, src, 10)`는 `src`에서 `dest`로 10바이트를 복사합니다.

2. `memmove()`
- 기능 : `memcpy()`와 유사하지만, 영역이 겹치는 경우에도 올바르게 동작합니다. 데이터가 중간 버퍼를 통해 복사됩니다.
- 사용법: `void *memmove(void *dest, const void *src, size_t n);`
- 예시: `memmove(dest, src, 10)`는 `src`에서 `dest`로 10바이트를 안전하게 복사합니다.

3. `memset()`
- 기능: 메모리 영역의 모든 바이트를 특정 값으로 설정합니다. 보통 메모리를 초기화할 때 사용됩니다.
- 사용법: `void *memset(void *s, int c, size_t n);`
- 예시: `memset(arr, 0, 10)`는 `arr`의 처음 10바이트를 `0`으로 설정합니다.

4. `memcmp()`
- 기능: 두 메모리 영역을 비교합니다. 영역이 같으면 `0`을, 첫 번째 영역이 두 번째 영역보다 사전적으로 앞서면 음수, 뒤쳐지면 양수를 반환합니다.
- 사용법: `int memcmp(const void *s1, const void *s2, size_t n);`
- 예시: `memcmp(arr1, arr2, 10)`는 `arr1`과 `arr2`의 처음 10바이트를 비교합니다.

이 함수들은 C 프로그래밍에서 데이터를 처리하고, 문자열을 조작하며, 메모리를 관리하는 데 있어 필수적인 도구입니다. 올바르게 사용하면 프로그램의 효율성과 안정성을 크게 향상시킬 수 있습니다.